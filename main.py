import os
from time import sleep
import asyncio

from dotenv import load_dotenv
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

from db import DataBase
from request import Scraper

# Take token from .env
load_dotenv() # Use for development only
TOKEN = os.getenv('TOKEN')
ADMIN_ID = os.getenv('ADMIN_ID')

# Create bot
bot = Bot(TOKEN)
dp = Dispatcher(bot, loop=asyncio.get_event_loop())

# Connect to model
db = DataBase('db.sqlite3')

# Create scraper
scrap = Scraper()

#Main button
button_home = KeyboardButton('Homeüè†')
kbs = ReplyKeyboardMarkup(resize_keyboard=True).add(button_home)

def my_marks(user_id):
    bts = InlineKeyboardMarkup()
    for item in db.get_identifier(user_id=user_id):
        bts.add(InlineKeyboardButton(item[1], callback_data=f'delete'))
    return bts


@dp.message_handler(commands=['start'])
@dp.message_handler(regexp='^Home')
async def main(message):
    await message.answer(
        ("–©–æ–± –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ –Ω–æ–≤–∏–π –¥–æ–∫—É–º–µ–Ω—Ç, "
        "–≤–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ id(–Ω–∞–ø—Ä–∏–∫–ª–∞–¥:800101) —É"
        " –ø–æ–ª–µ \"–ù–∞–ø–∏—Å–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\".\n\n"
        "–©–æ–± –ø–µ—Ä–µ—Å—Ç–∞—Ç–∏ –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç - "
        "–Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –π–æ–≥–æ id —É —Å–ø–∏—Å–∫—É –Ω–∏–∂—á–µ."),
        reply_markup = my_marks(message["from"].id),
        )
    await message.delete()

@dp.message_handler(regexp='^[0-9]+$')
async def add_identifier(message):
    if not db.get_identifier(message['from'].id).fetchone():
        mesg, *status = scrap.check(message.text)
        if mesg:
            db.add_identifier(message['from'].id, message.text, status[0])
            await message.answer(f"–î–æ–¥–∞–Ω–æ –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º \"{mesg}\"", reply_markup = kbs)
        elif mesg == None:
            await message.answer("–°–µ—Ä–≤–µ—Ä –æ—Ñ—Ñ–ª–∞–π–Ω, –∑–≤–µ—Ä–Ω—ñ—Ç—Å—è –ø—ñ–∑–Ω—ñ—à–µ.", reply_markup = kbs)
        else:
            await message.answer("–î–∞–Ω—ñ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ —á–∏ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏", reply_markup = kbs)
    else:
        await message.answer("–í–∏ –≤–∂–µ –≤—ñ–¥—Å—Ç–µ–∂—É—î—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç", reply_markup = kbs)

@dp.callback_query_handler(text='delete')
async def delete(call):
    db.delete_record(call['from'].id)
    await call.message.answer('–î–æ–∫—É–º–µ–Ω—Ç –±—ñ–ª—å—à–µ –Ω–µ –≤—ñ–¥—Å—Ç–µ–∂—É—î—Ç—å—Å—è', reply_markup = kbs)
    
    
        


async def test():
    while(True):
        await asyncio.sleep(1)
        len = db.count().fetchone()[0]
        for i in range(1,len+1):
            print(i)
            await asyncio.sleep(100)
            obj = db.get_item(i-1, i)
            obj = obj.fetchone()
            rez, *status = scrap.check(obj[1])
            if rez:
                 if status[0] != obj[2]:
                    await bot.send_message(obj[0], f'–°—Ç–∞—Ç—É—Å –≤–∞—à–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–æ \"{rez}\". –ë—ñ–ª—å—à –¥–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è - http://passport.mfa.gov.ua/', reply_markup = kbs)
                    db.update_record(obj[0], status[0])
            elif rez == None:
                await bot.send_message(ADMIN_ID, '–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç')
            else:
                await bot.send_message(obj[0], f'–ó–∞–ø–∏—Å –ø—Ä–æ –¥–æ–∫—É–º–µ–Ω—Ç {obj[1]} –∑–∞—Å—Ç–∞—Ä—ñ–≤ —ñ –±—É–≤ –≤–∏–¥–∞–ª–µ–Ω–∏–π.', reply_markup = kbs)
                db.delete_record(obj[0])
               


            
        


if __name__ == "__main__":
    dp.loop.create_task(test())  # Providing awaitable as an argument
    executor.start_polling(dp, skip_updates=True)